using System;
using System.Collections.Generic;
using System.Linq;
using System.Text;
using System.Threading.Tasks;
using EMS.Models;
using EMS.Services;
using EMS.Interfaces;


namespace EMS.Models
{
    //Report class is the base class for all report classes in the system. 
    public class Report : IReport
    {
        private int _reportId;
        private string _reportName;
        private EReportType _type;
        private string _query;
        private DateTime _createdDate;
        private Employee generatedBy;


        public enum EReportType
        {
            EmployeeDirectory,
            Attendance,
            LeaveAndAbsence
        }


        public int ReportId
        {
            get { return _reportId; }
            set { _reportId = value; }
        }

        public string ReportName
        {
            get { return _reportName; }
            set { _reportName = value; }
        }

        public EReportType ReportQuery
        {
            get { return _type; }
            set { _type = value; }
        }

        public string Query
        {
           get { return _query; }
            set { _query = value; }
        }   


        public Employee GeneratedBy
        {
            get { return generatedBy; }
            set { generatedBy = value; }
        }


        public DateTime CreatedDate
        {
            get { return _createdDate; }
            set { _createdDate = value; }
        }

        
        public Report() { }


        /// <summary>
        /// Generates a SQL query string based on the specified report type.
        /// </summary>
        /// <param name="reportType">The type of report to generate the query for. Can be EmployeeDirectory, Attendance, or LeaveAndAbsence.</param>
        /// <returns>A SQL query string used to fetch data for the specified report type.</returns>
        /// <exception cref="ArgumentException">Thrown when the provided report type is invalid.</exception>
        /// <remarks>
        /// Name: GenerateQuery
        /// Date: 2024-08-11
        /// The method constructs a SQL query based on the provided report type. The query is designed to retrieve specific data from the database. 
        /// For EmployeeDirectory, it fetches employee details; for Attendance, it fetches time records; and for LeaveAndAbsence, it retrieves records of leave or absence.
        /// </remarks>
        public static string GenerateQuery(EReportType reportType)
        {
            string query;

            switch (reportType)
            {
                case EReportType.EmployeeDirectory:

                    return "SELECT Id, Name, Email, Position, Salary, CreatedAt, UpdatedAt FROM Employees";                    

                case EReportType.Attendance:

                    return "SELECT e.Id, e.Name, t.Date, t.HoursWorked, e.Email, e.Position, t.CreatedAt FROM Employees e JOIN TimeRecords t ON e.Id = t.EmployeeId WHERE t.Type = 'Attendance'";                    

                case EReportType.LeaveAndAbsence:

                    return "SELECT e.Id, e.Name, t.Date, t.HoursWorked, e.Email, e.Position, t.CreatedAt FROM Employees e JOIN TimeRecords t ON e.Id = t.EmployeeId WHERE (t.Type = 'Leave' OR t.Type = 'Absence')";
                    

                default:
                    throw new ArgumentException("Invalid report type");
            }
        }

        /// <summary>
        /// Async method, generates a report based on specified report type.
        /// </summary>
        /// <param name="reportType">The type of report to generate. Must be one of the predefined report types such as EmployeeDirectory, Attendance, or LeaveAndAbsence.</param>
        /// <returns>A Task representing the asynchronous operation, with a result that is a list of Report objects generated by ReportService.GenerateQuery based on the query for the specified report type.</returns>
        /// <exception cref="InvalidOperationException">Thrown when there is an error generating the report.</exception>
        /// <remarks>
        /// Name: GenerateReport
        /// Date: 2024-08-11
        /// Asynchronously retrieves a list of Report objects by calling a GenerateQuery method from ReportService to execute a query.
        /// The report is based on the given report type, which influences the query used to fetch the data. The result is a Task containing a list of Report objects mapped.
        /// </remarks>
        public async Task<List<Report>> GenerateReport(EReportType reportType)
        {
            try
            {
                ReportService reportService = new ReportService(new DBService(), new ReportMapper());                            
                return await reportService.GetReport(GenerateQuery(reportType), reportType);
            }
            catch (Exception ex)
            {
                throw new InvalidOperationException("Error generating report", ex);
            }
        }

        /// <summary>
        /// Asynchronously saves a list of reports to an Excel file based on the report type.
        /// </summary>
        /// <typeparam name="T">Generic type of objects contained in the list to be saved. A type compatible with the Report type.</typeparam>
        /// <param name="repList">List of reports to be saved. Each item in the list represents a report entry.</param>
        /// <param name="repType">The type of report being saved, which determines the title and naming of the file.</param>
        /// <returns>A Task representing the asynchronous save operation (triggered by the component).</returns>
        /// <remarks>
        /// Name: SaveReport
        /// Date: 2024-08-12
        /// This method uses an IOService to export the provided list of report objects to an Excel file. The file path is dynamically generated using the report type and current date.
        /// The method ensures the file is saved in the specified location with a name reflecting the report type and date. The export process is handled asynchronously.
        /// </remarks>
        public async Task SaveReport<T>(List<T> repList, Report.EReportType repType)
        {
            IOService ioService = new IOService();

            string repTitle = repType.ToString();
            DateOnly date = DateOnly.FromDateTime(DateTime.Now);
            string dateStr = date.ToString();


            await ioService.ExportToXls<T>(repList, $@"C:\{repTitle}-{dateStr}.xlsx", $"{repTitle}", repType);

        }
        

        /*
        public void SendReport();
             
        */
    }
}
