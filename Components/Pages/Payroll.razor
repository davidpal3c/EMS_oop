<!--
OOP2 - Stefan Garcia, David Palacios and Manminder Singh
The payroll page manages payroll data for employees and allows users to add, update and delete payroll records.
Users are also able to search for payroll data by employees and sort payroll data.
-->

@page "/payroll"
@using Models
@using Services
@inject DBService DBService
@inject EmployeeService EmployeeService
@inject PayrollService PayrollService


<div class="page-ems">
    <div class="page-section-ems">
        <h1>Payroll</h1>
        <div>Manage payrolls for employees | @records payroll records listed</div>
        <div class="page-header-ems">
            <div class="page-header-ems-section">
                <div class="input-group">
                    <span class="input-group-text"><i class="bi bi-search"></i></span>
                   <input type="search" class="form-control" placeholder="Search for payroll by employee" @bind="search" @bind:event="oninput" @bind:after="SearchEmployees" />
                   </div>
                   <div class="form-floating">
            <select @bind="sort" @bind:event="onchange" @bind:after="RefreshList" class="form-select" placeholder="Role filter">
                <option value="Id" selected>Id</option>
                <option value="Name">Name</option>
                <option value="BaseSalary">Base Salary</option>
                <option value="OvertimePay">Overtime</option>
                <option value="Deductions">Deductions</option>
                <option value="NetPay">Net salary</option>
            </select>
            <label>Sort by</label>
            </div>
           </div>
            @if (msg != null)
            {
                <div class="alert alert-success alert-dismissible fade show alert-fixed" role="alert">
                    @msg
                    <button type="button" class="btn-close" data-bs-dismiss="alert" @onclick="CloseMessage"></button>
                </div>
            }
        </div>
        <table class="table table-hover" id="myTable">
            <thead>
                <tr class="thead-border">
                    <th>Id</th>
                    <th>Employee</th>
                    <th>Base</th>
                    <th>Overtime</th>
                    <th>Deductions</th>
                    <th>Net Salary</th>
                    <th class="td-actions"></th>
                </tr>
            </thead>
            <tbody>
                @if (filteredData != null)
                {
                    if(filteredData.Count == 0)
                    {
                        <div class="loader">Loading...</div>
                    }else{
                    @foreach (Models.Payroll p in filteredData)
                    {
                        <tr>
                            <td>@p.Id</td>
                            <td>@p.EmployeeName</td>
                            <td>@p.BaseSalary.ToString("C")</td>
                            <td>@p.OvertimePay.ToString("C")</td>
                            <td>@p.Deductions.ToString("C")</td>
                            <td>@p.NetSalary.ToString("C")</td>
                            <td class="td-actions">
                                <button type="submit" class="btn btn-primary" data-toggle="tooltip" data-placement="top" data-trigger="top" title="Edit" @onclick="() => EditPayroll(p)">
                                    <i class="bi bi-arrow-right"></i>
                                   
                                </button>
                            </td>
                        </tr>
                        }
                    }
                }
                else
                {

                    if(payrollList.Count == 0)
                    {
                        <div class="loader">Loading...</div>
                    }else{

                   
                    @foreach (Models.Payroll p in payrollList)
                    {

                        
                        <tr @onclick="()=>EditPayroll(p)">
                            <td>@p.Id</td>
                            <td>@p.EmployeeName</td>
                            <td>@p.BaseSalary.ToString("C")</td>
                            <td>@p.OvertimePay.ToString("C")</td>
                            <td>@p.Deductions.ToString("C")</td>
                            <td>@p.NetSalary.ToString("C")</td>
                            <td class="td-actions">
                                <button type="submit" class="btn btn-primary" data-toggle="tooltip" data-placement="top" data-trigger="top" title="Edit" @onclick="() => EditPayroll(p)">
                                    <i class="bi bi-arrow-right"></i>
                                 
                                </button>
                            </td>
                        </tr>
                    }
                    }
                }
            </tbody>
        </table>
    </div>
    <div class="page-section-ems">
        <EditForm Model="@pay" OnValidSubmit="SubmitForm">
            <DataAnnotationsValidator />
            <div class="h2">@title
                <div class="button-holder-ems">
                    @if (id != null)
                    {
                        formSubmission = "update";
                        <button type="submit" class="btn btn-primary" data-toggle="tooltip" data-placement="top" data-trigger="top" title="Submit Update"><i class="bi bi-save2"></i></button>
                        <button type="button" @onclick="Reset" class="btn btn-outline-primary" data-toggle="tooltip" data-placement="top" data-trigger="hover" title="Back"><i class="bi bi-x-lg"></i></button>
                        <button type="button" @onclick="DeletePayroll" class="btn btn-danger" data-toggle="tooltip" data-placement="top" data-trigger="hover" title="Delete"><i class="bi bi-trash3"></i></button>
                    }
                    else
                    {
                        formSubmission = "create";
                        <button type="submit" class="btn btn-primary" data-toggle="tooltip" data-placement="top" data-trigger="hover" title="Submit"><i class="bi bi-plus-lg"></i></button>
                    }
                </div>
            </div>
            @if (id != null)
            {
                
                <div class="mb-3">
                    <label class="form-label" for="idd">Payroll Id</label>
                    <input type="number" @bind="pay.Id" class="form-control" id="idd" readonly disabled />
                </div>
            }            

            <div class="mb-3">
                <label class="form-label" for="name">Employee</label>
                <select @bind="pay.EmployeeId" placeholder="Employee" class="form-select" id="name" required>
                    <option value="">Select Employee</option>
                    @foreach(Employee e in employeeOptions)
                    {
                        <option value="@e.Id">@e.Name</option>
                    }
                </select>
            </div>        
            <div class="mb-3">
                <label class="form-label" for="salary">Base Salary</label>
                <InputNumber type="number" @bind-Value="pay.BaseSalary" step=".01" placeholder="Enter Salary" class="form-control" id="salary" required />
                <ValidationMessage For="@(() => pay.BaseSalary)" />
            </div>
            <div class="mb-3">
                <label class="form-label" for="overtime">Overtime Pay</label>
                <InputNumber type="number" @bind-Value="pay.OvertimePay" step=".01" placeholder="Enter Overtime Pay" class="form-control" id="overtime" required />
                <ValidationMessage For="@(() => pay.OvertimePay)" />
            </div>
            <div class="mb-3">
                <label class="form-label" for="deductions">Deductions</label>
                <InputNumber type="number" @bind-Value="pay.Deductions" step=".01" placeholder="Enter Deductions" class="form-control" id="deductions" required />
                <ValidationMessage For="@(() => pay.Deductions)" />
            </div>
             @if (id != null)
            {
            <div class="mb-3">
                <label class="form-label" for="netpay">Net Pay</label>
                <input type="number" @bind="netPay" step=".01" placeholder="Enter Net pay" class="form-control" id="netpay" required readonly disabled/>
            </div>
                <div class="mb-3">
                    <label class="form-label" for="created">Created</label>
                    <input type="datetime" @bind="created" class="form-control" id="created" required readonly disabled />
                </div>
                <div class="mb-3">
                    <label class="form-label" for="updated">Updated</label>
                    <input type="datetime" @bind="updated" class="form-control" id="updated" required readonly disabled />
                </div>
            }
           

        </EditForm>
    </div>
</div>

@code {
    private int? id;
    private int? employee;
    private double baseSalary = 0;
    private double overtimePay = 0;
    private double deductions = 0;
    private double netPay = 0;
    private DateTime? created;
    private DateTime? updated;
    private string formSubmission = "create";
    private string? search;
    private string sort = "Id";
    private string title = "Add Payroll";
    private List<Models.Payroll> payrollList = new List<Models.Payroll>();
    private List<Models.Employee> employeeOptions = new List<Models.Employee>();
    private string? msg;
    private string alert = "alert-success";
    private int records = 0;
    private string activeClass = "";
    private Models.Payroll pay = new Models.Payroll();
    private List<Models.Payroll>? filteredData = new List<Models.Payroll>();






    protected override async Task OnInitializedAsync()
    {

        if (DBService.IsSuccessfulConnection())
        {
            //msg = "DB Connection - OK!";
        }
        else
        {
            msg = "Reconfigure connection string at MauiProgram.cs";
            alert = "alert-danger";
        }

        //custList = await DatabaseService.GetCustomers();
        await RefreshList();
    }

    private async Task Reset()
    {
        baseSalary = netPay = overtimePay = deductions = 0;
        id = employee = null;
        title = "Add Payroll";
        pay = new Models.Payroll();
    }

    private async Task CloseMessage()
    {
        msg = null;
    }

    private async Task RefreshList()
    {
        try
        {
            payrollList = await PayrollService.GetPayrolls(sort);
            employeeOptions = await EmployeeService.GetEmployees("Id");
            records = payrollList.Count;
            filteredData = null;
        }
        catch (Exception e)
        {
            msg = $"Error during refresh: {e.Message}";
            alert = "alert-danger";
        }
    }

    private void SendMessage(string message)
    {
        msg = message;
    }

    private async Task SearchEmployees()
    {
        try
        {
            if (search == "") { await RefreshList(); }
            else
            {
                filteredData = await PayrollService.SearchPayrolls(search);
                records = filteredData.Count;
            }
        }
        catch (Exception e)
        {
            msg = $"Error getting search results: {e.Message}";
            alert = "alert-danger";
        }
    }

    private async Task EditPayroll(Models.Payroll payroll)
    {
        try
        {
            pay = payroll;
            id = payroll.Id;
            employee = payroll.EmployeeId;
            baseSalary = payroll.BaseSalary;
            overtimePay = payroll.OvertimePay;
            deductions = payroll.Deductions;
            netPay = payroll.NetSalary;
            created = payroll.CreatedAt;
            updated = payroll.UpdatedAt;
            title = $"{payroll.EmployeeName}";
        }
        catch (Exception e)
        {
            msg = $"Error during refresh: {e.Message}";
            alert = "alert-danger";
        }
    }

    private async Task SubmitForm()
    {
        if (formSubmission == "create")
        {
            await AddPayroll();
        }
        else
        {
            await UpdatePayroll();
        }
    }


    private async Task AddPayroll()
    {
        try
        {
            List<object> payrollData = new List<object>();
            payrollData.Add(pay.EmployeeId);
            payrollData.Add(pay.BaseSalary);
            payrollData.Add(pay.OvertimePay);
            payrollData.Add(pay.Deductions);
            netPay = (pay.BaseSalary + pay.OvertimePay) - pay.Deductions;
            payrollData.Add(netPay);
            
            await PayrollService.AddPayroll(payrollData);
            SendMessage($"New payroll record added successfully!");
            await RefreshList();
            await Reset();
        }
        catch (Exception e)
        {
            msg = $"An error occurred: adding{e.Message}";
            alert = "alert-danger";
        }
    }

    private async Task UpdatePayroll()
    {
        try
        {
            netPay = (pay.BaseSalary + pay.OvertimePay) - pay.Deductions;
            pay.NetSalary = netPay;
            await PayrollService.UpdatePayroll(pay);
            await RefreshList();
            await Reset();
            SendMessage($"Payroll record updated successfully!");
        }
        catch (Exception e)
        {
            msg = $"An error occurred: adding{e.Message}";
            alert = "alert-danger";
        }
    }

    private async Task DeletePayroll()
    {
        try
        {
            bool confirmDelete = await App.Current.MainPage.DisplayAlert("Confirm Deletion!", $"Are you sure you want to delete?", "OK", "Cancel");

            if (confirmDelete)
            {
                if (pay != null)
                {
                    await PayrollService.DeletePayroll(pay);
                    await RefreshList();
                    await Reset();
                    SendMessage($"Payroll record was deleted successfully");
                }
            }
            else
            {
                msg = $"Deletion Cancelled.";
            }

        }
        catch (Exception e)
        {
            msg = $"An error occurred: adding{e.Message}";
            alert = "alert-danger";
        }

    }



}

