@page "/timeRecord"
@using Models
@using Services
@inject Services.DBService DBService
@inject Services.EmployeeService EmployeeService
@inject Services.PayrollService PayrollService
@inject Services.TimeRecordService TimeRecordService    


<div class="page-ems">
    <div class="page-section-ems">
        <h1>Time Record</h1>
        <div>Manage employee time records | @records time records listed</div>
        <div class="page-header-ems">
            <div class="page-header-ems-section">
                <div class="input-group">
                    <span class="input-group-text"><i class="bi bi-search"></i></span>
                <input type="search" class="form-control" placeholder="Search for time records by employee" @bind="search" @bind:event="oninput" @bind:after="SearchTimeRecords" />
                </div>

                <div class="form-floating">
                    <select @bind="sort" @bind:event="onchange" @bind:after="RefreshList" class="form-select" placeholder="Type filter">
                        <option value="Id" selected>Id</option>
                        <option value="Name">Name</option>
                        <option value="Date">Date</option>
                        <option value="HoursWorked">Hours Worked</option>
                        <option value="Type">Type</option>
                    </select>
                    <label>Sort by</label>
                </div>

                <div class="form-floating">
                <select @bind="filter" @bind:event="onchange" @bind:after="FilterByType" class="form-select" placeholder="Choose filter">
                    <option value="" selected>Select filter</option>
                    <option value="Attendance">Attendance</option>
                    <option value="Overtime">Overtime</option>
                    <option value="Leave">Leave</option>
                </select>
                <label>Filter by</label>
            </div> 
            </div>
            @if (msg != null)
            {
                <div class="alert alert-success alert-dismissible fade show alert-fixed" role="alert">
                    @msg
                    <button type="button" class="btn-close" data-bs-dismiss="alert" @onclick="CloseMessage"></button>
                </div>
            }
        </div>
        <table class="table table-hover" id="myTable">
            <thead>
                <tr class="thead-border">
                    <th>Id</th>
                    <th>Employee</th>
                    <th>Date</th>
                    <th>Hours Worked</th>
                    <th>Type</th>
                    <th class="td-actions"></th>
                </tr>
            </thead>
            <tbody>
                @if (filteredData != null)
                {
                    if(filteredData.Count == 0)
                    {
                        <div class="loader">Loading...</div>
                    }else{
                    @foreach (Models.TimeRecord t in filteredData)
                    {
                        <tr @onclick="() => EditPayroll(t)">
                            <td>@t.Id</td>
                            <td>@t.EmployeeName</td>
                            <td>@t.Date</td>
                            <td>@t.HoursWorked</td>
                            <td>@t.Type</td>
                            <td class="td-actions">
                                <button type="submit" class="btn btn-primary" data-toggle="tooltip" data-placement="top" data-trigger="top" title="Edit" @onclick="() => EditPayroll(t)">
                                    <i class="bi bi-arrow-right"></i>
                                </button>
                            </td>
                        </tr>
                        }
                    }
                }
                else
                {
                    if(timeList.Count == 0)
                    {
                        <div class="loader">Loading...</div>
                    }else{
                    @foreach (Models.TimeRecord t in timeList)
                    {

                        <tr @onclick="() => EditPayroll(t)">
                            <td>@t.Id</td>
                            <td>@t.EmployeeName</td>
                            <td>@t.Date</td>
                            <td>@t.HoursWorked</td>
                            <td>@t.Type</td>
                            <td class="td-actions">
                                <button type="submit" class="btn btn-primary" data-toggle="tooltip" data-placement="top" data-trigger="top" title="Edit" @onclick="() => EditPayroll(t)">
                                    <i class="bi bi-arrow-right"></i>
                                </button>
                            </td>
                        </tr>
                    }
                    }
                }
            </tbody>
        </table>
    </div>
    <div class="page-section-ems">
        <EditForm Model="@selectedTimeRec" OnValidSubmit="SubmitForm">
            <DataAnnotationsValidator />
            <div class="h2"><div>@title</div>
                <div class="button-holder-ems">
                    @if (id != null)
                    {
                        formSubmission = "update";
                        <button type="submit" class="btn btn-primary" data-toggle="tooltip" data-placement="top" data-trigger="top" title="Submit"><i class="bi bi-save2"></i></button>
                        <button type="button" @onclick="Reset" class="btn btn-outline-danger" data-toggle="tooltip" data-placement="top" data-trigger="top" title="Back"><i class="bi bi-x-lg"></i></button>
                        <button type="button" @onclick="DeleteTimeRecord" class="btn btn-danger" data-toggle="tooltip" data-placement="top" data-trigger="top" title="Delete"><i class="bi bi-trash3"></i></button>
                    }
                    else
                    {
                        formSubmission = "create";
                        <button type="submit" class="btn btn-primary" data-toggle="tooltip" data-placement="top" data-trigger="top" title="Submit"><i class="bi bi-plus-lg"></i></button>
                    }
                </div>
            </div>
            @if (id != null)
            {                
                <div class="mb-3">
                    <label class="form-label" for="idd">Time Record Id</label>
                    <input type="number" @bind="selectedTimeRec.Id" class="form-control" id="idd" readonly disabled />
                </div>
            }           

            <div class="mb-3">
                <label class="form-label" for="name">Employee</label>
                <select @bind="selectedTimeRec.EmployeeId" placeholder="Employee" class="form-select" id="name" required>
                    <option value="">Select Employee</option>
                    @foreach (Employee e in employeeOptions)
                    {
                        <option value="@e.Id">@e.Name</option>
                    }
                </select>
            </div>
            <div class="mb-3">
                <label class="form-label" for="date">Date</label>
                <InputDate @bind-Value="selectedTimeRec.Date" class="form-control" id="date" required />
                <ValidationMessage For="@(() => selectedTimeRec.Date)" />
            </div>
            <div class="mb-3">
                <label class="form-label" for="hours">Hours Worked</label>
                <InputNumber @bind-Value="selectedTimeRec.HoursWorked" step=".01" placeholder="Hours" class="form-control" id="hours" required />
                <ValidationMessage For="@(() => selectedTimeRec.HoursWorked)" />
            </div>
            <div class="mb-3">
                <label class="form-label" for="type">Type</label>
                <select @bind="selectedTimeRec.Type" class="form-select" id="type" required>
                    <option value="">Select Type</option>
                    <option value="Attendance">Attendance</option>
                    <option value="Overtime">Overtime</option>
                    <option value="Leave">Leave</option> 

                </select>
            </div>
            @if (id != null)
            {
                <div class="mb-3">
                    <label class="form-label" for="created">Created</label>
                    <input type="datetime" @bind="created" class="form-control" id="created" required readonly disabled />
                </div>
                <div class="mb-3">
                    <label class="form-label" for="updated">Updated</label>
                    <input type="datetime" @bind="updated" class="form-control" id="updated" required readonly disabled />
                </div>
            }
            

        </EditForm>
    </div>
</div>

@code {
    private int? id;
    private int? employee;
    private double baseSalary = 0;
    private double overtimePay = 0;
    private double deductions = 0;
    private double netPay = 0;
    private DateTime? date;
    private double? hoursWorked;
    private string type;
    private DateTime? created;
    private DateTime? updated;
    private string? search;
    private string? filter;
    private string sort = "Id";
    private string formSubmission = "create";
    private string title = "Add Record";
    private List<Models.Payroll> payrollList = new List<Models.Payroll>();
    private List<Models.TimeRecord> timeList = new List<Models.TimeRecord>();
    private List<Models.Employee> employeeOptions = new List<Models.Employee>();
    private string? msg;
    private string alert = "alert-success";
    private int records = 0;
    private string activeClass = "";
    private Models.TimeRecord? updatedTimeRecord;     
    private Models.TimeRecord selectedTimeRec = new Models.TimeRecord();
    private List<Models.TimeRecord>? filteredData = new List<Models.TimeRecord>();

    private int employeeId;




    protected override async Task OnInitializedAsync()
    {

        if (DBService.IsSuccessfulConnection())
        {
            //msg = "DB Connection - OK!";
        }
        else
        {
            msg = "Reconfigure connection string at MauiProgram.cs";
            alert = "alert-danger";
        }

        //custList = await DatabaseService.GetCustomers();
        await RefreshList();
    }

    private async Task Reset()
    {        
        id = employee = null;
        type = "";
        title = "Add Record";
        selectedTimeRec = new Models.TimeRecord();
    }

    private async Task CloseMessage()
    {
        msg = null;
    }

    private async Task RefreshList()
    {
        try
        {
            payrollList = await PayrollService.GetPayrolls("Id");
            timeList = await TimeRecordService.GetTimeRecords(sort);
            employeeOptions = await EmployeeService.GetEmployees("Id");
            records = payrollList.Count;
            filteredData = null;
        }
        catch (Exception e)
        {
            msg = $"Error during refresh: {e.Message}";
            alert = "alert-danger";
        }
    }

    private async Task SearchTimeRecords()
    {
        try
        {
            if (search == "") { await RefreshList(); }
            else
            {
                filteredData = await TimeRecordService.SearchTimeRecords(search);
                records = filteredData.Count;
            }
            
        }
        catch (Exception e)
        {
            msg = $"Error getting search results: {e.Message}";
            alert = "alert-danger";
        }
    }

    private async Task FilterByType()
    {
        try
        {
            if (filter == "") { await RefreshList(); }
            else
            {
          
                filteredData = await TimeRecordService.FilterTimeRecords("Type", filter);
                records = filteredData.Count;
            }
        }
        catch (Exception e)
        {
            msg = $"Error getting search results: {e.Message}";
            alert = "alert-danger";
        }
    }

    private async Task EditPayroll(Models.TimeRecord timeRec)
    {
        try
        {
            selectedTimeRec = timeRec;

            id = selectedTimeRec.Id;
            employee = selectedTimeRec.EmployeeId;
            date = selectedTimeRec.Date;
            hoursWorked = selectedTimeRec.HoursWorked;
            //type = selectedTimeRec.Type;
            created = selectedTimeRec.CreatedAt;
            updated = selectedTimeRec.UpdatedAt;
            title = $"Update {selectedTimeRec.Id}";
            
        }
        catch (Exception e)
        {
            msg = $"Error during refresh: {e.Message}";
            alert = "alert-danger";
        }
    }

    private async Task SubmitForm()
    {
        if (formSubmission == "create")
        {
            await AddTimeRecord();
        }
        else
        {
            await UpdateTimeRecord();
        }
    }


    private async Task AddTimeRecord()
    {
        try
        {

            List<object> timeRecordData = new List<object>();            
            timeRecordData.Add(selectedTimeRec.EmployeeId);           // employee Id
            timeRecordData.Add(selectedTimeRec.Date);
            timeRecordData.Add(selectedTimeRec.HoursWorked);
            timeRecordData.Add(selectedTimeRec.Type);

            await TimeRecordService.AddTimeRecord(timeRecordData);
            await RefreshList();
            await Reset();
            msg = $"New Time Record added successfully!";
        }
        catch (Exception e)
        {
            msg = $"An error occurred: adding{e.Message}";
            alert = "alert-danger";
        }
    }

    private async Task UpdateTimeRecord()
    {
        try
        {
            /*
            updatedTimeRecord = new Models.TimeRecord
            {
                    Id = selectedTimeRec.Id,
                    EmployeeId = selectedTimeRec.EmployeeId,
                    Date = selectedTimeRec.Date,
                    HoursWorked = selectedTimeRec.HoursWorked,
                    Type = selectedTimeRec.Type
            };
            */
            await TimeRecordService.UpdateTimeRecord(selectedTimeRec);         
            await RefreshList();
            await Reset();
            msg = $"Payroll record updated successfully!";
        }
        catch (Exception e)
        {
            msg = $"An error occurred: adding{e.Message}";
            alert = "alert-danger";
        }
    }


    private async Task DeleteTimeRecord()
    {

        try
        {
            bool confirmDelete = await App.Current.MainPage.DisplayAlert("Confirm Deletion!", $"Are you sure you want to delete?", "OK", "Cancel");

            if (confirmDelete)
            {
                if (selectedTimeRec != null)
                {
                    await TimeRecordService.DeleteTimeRecord(selectedTimeRec);
                    msg = $"Time record was deleted successfully";
                    await RefreshList();
                    await Reset();
                }
            }
            else
            {
                msg = $"Deletion Cancelled.";
            }             

        }
        catch (Exception e)
        {
            msg = $"An error occurred: adding{e.Message}";
            alert = "alert-danger";
        }
        
    }
  


}


