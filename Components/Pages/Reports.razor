@page "/reports"
@using Interfaces
@using Models
@using Services
@inject DBService DBService
@inject EmployeeService EmployeeService
@inject PayrollService PayrollService
@inject IOService ExportToXls
@inject IJSRuntime JSRuntime


<h1>Reports</h1>
<div>Manage Reports</div>

<div class="page-header-ems">
    <div class="page-header-ems-section">
        <div class="form-floating">
        <select class="form-select" @onchange="HandleReportSelect">
            <option value="">-- Select Report Type --</option>
            @foreach (Report.EReportType rt in Enum.GetValues(typeof(Report.EReportType)))
            {
                <option value="@rt">@rt.ToString()</option>
            }
        </select>
        <label>Select Report</label>
        </div>

        <div class="header-btn-box">
            <button type="submit" class="btn btn-primary" data-toggle="tooltip" data-placement="top" data-trigger="top" title="Export (.xlsx)" @onclick="ExportHandler">
                <i class="bi bi-file-spreadsheet"></i>
            </button>
            <button type="submit" class="btn btn-success" data-toggle="tooltip" data-placement="top" data-trigger="top" title="Print" @onclick="PrintView">
                <i class="bi bi-printer"></i>
            </button>
        </div>        
    </div>
    @if (msg != null)
    {
        <div style="margin-top:10px;" class="alert alert-success alert-dismissible fade show" role="alert">
            @msg
            <button type="button" class="btn-close" data-bs-dismiss="alert" @onclick="CloseMessage"></button>
        </div>
    }
</div>

<div class="report-page-ems">
    <div class="page-section-ems">
        @if (reportList.Count > 0)
        {
            <table class="report-table table" id="reportTable">

                @if (selectedRepType == Report.EReportType.EmployeeDirectory)
                {
                    <thead>
                        <tr class="thead-border">
                            <th>Id</th>
                            <th>Employee Name</th>
                            <th>Email</th>
                            <th>Position</th>
                            <th>Salary</th>
                            <th>CreatedAt</th>
                            <th>UpdatedAt</th>
                            <th class="td-actions"></th>
                        </tr>
                    </thead>
                    <tbody>
                        @foreach (EmployeeDirectoryReport rep in reportList.OfType<EmployeeDirectoryReport>())
                        {
                            <tr>
                                <td>@rep.Id</td>
                                <td>@rep.Name</td>
                                <td><a href="mailto:@rep.Email">@rep.Email</a></td>                                
                                <td>@rep.Position</td>
                                <td>@rep.Salary.ToString("C")</td>
                                <td>@rep.CreatedAt</td>
                                <td>@rep.UpdatedAt</td>
                            </tr>
                        }
                    </tbody>
                }

                else if (selectedRepType == Report.EReportType.Attendance)
                {
                    <thead>
                        <tr class="thead-border">
                            <th>Date</th>
                            <th>Employee Id</th>
                            <th>Employee Name</th>
                            <th>Hours Worked</th>
                            <th>Email</th>
                            <th>Position</th>
                            <th>CreatedAt</th>
                            <th class="td-actions"></th>
                        </tr>
                    </thead>
                    <tbody>
                        @foreach (AttendanceReport rep in reportList.OfType<AttendanceReport>())
                        {
                            <tr>
                                <td>@rep.Date</td>
                                <td>@rep.Id</td>
                                <td>@rep.Name</td>
                                <td>@rep.HoursWorked</td>
                                <td><a href="mailto:@rep.Email">@rep.Email</a></td>                                
                                <td>@rep.Position</td>
                                <td>@rep.CreatedAt</td>
                                <td class="td-actions">
                                </td>
                            </tr>
                        }
                    </tbody>
                }
                else if (selectedRepType == Report.EReportType.LeaveAndAbsence)
                {
                    <thead>
                        <tr class="thead-border">
                            <th>Date</th>
                            <th>Employee Id</th>
                            <th>Employee Name</th>
                            <th>Hours Absent</th>
                            <td>Email</td>
                            <th>Position</th>                            
                            <th>CreatedAt</th>
                            <th class="td-actions"></th>
                        </tr>
                    </thead>
                    <tbody>
                        @foreach (LeaveAndAbsenceReport rep in reportList.OfType<LeaveAndAbsenceReport>())
                        {
                            <tr>
                                <td>@rep.Date</td>
                                <td>@rep.Id</td>
                                <td>@rep.Name</td>
                                <td>@rep.HoursWorked</td>
                                <td><a href="mailto:@rep.Email">@rep.Email</a></td>                                
                                <td>@rep.Position</td>
                                <td>@rep.CreatedAt</td>
                                <td class="td-actions">
                                </td>
                            </tr>
                        }
                    </tbody>                
                }
            </table>
        }
        else
        {
            <div>No records available for the selected report type.</div>
        }
    </div>
</div>


@code {


    private Report.EReportType selectedRepType;
    private List<Report> reportList = new List<Report>();
    private string? msg;
    private string alert = "alert-success";

    protected override async Task OnInitializedAsync()
    {

        if (DBService.IsSuccessfulConnection())
        {
            //msg = "DB Connection - OK!";
        }
        else
        {
            msg = "Reconfigure connection string at MauiProgram.cs";
            alert = "alert-danger";
        }
        await RefreshList(selectedRepType);


    }

    private async Task HandleReportSelect(ChangeEventArgs e)
    {
        if (string.IsNullOrEmpty(e.Value?.ToString()))
        {
            selectedRepType = default; 
            reportList.Clear();
            return; 
        }

        if (Enum.TryParse(e.Value?.ToString(), out Report.EReportType rtype))
        {
            selectedRepType = rtype;
            await RefreshList(rtype);
        }                
    }


    private async Task RefreshList(Report.EReportType? rtype)
    {  
        try
        {            
            IReport rep = new Report();
            var fetchedReports = await rep.GenerateReport(rtype.GetValueOrDefault());

            reportList.Clear();                     
            reportList.AddRange(fetchedReports);           

        }
        catch (Exception e)
        {
            msg = $"Error during refresh: {e.Message}";
            alert = "alert-danger";
        }
    }


    private async Task CloseMessage()
    {
        msg = null;
    }

    private async Task ExportHandler()
    {
        try
        {
            if (reportList.Count > 0)
            {
                IReport rep = new Report();
                await rep.SaveReport(reportList, selectedRepType);
                msg = "Report exported successfully.";
                alert = "alert-success";
            }
            else
            {
                msg = "No records available for export.";
                alert = "alert-warning";
            }
        }
        catch (Exception e)
        {
            msg = $"Error during export: {e.Message}";
            alert = "alert-danger";
        }             
    }


    private async Task PrintView()
    {
        try
        {
            if (reportList.Count > 0)
            {
                string repTitle = selectedRepType.ToString();
                await JSRuntime.InvokeVoidAsync("printElement", "reportTable");
            }
            else
            {
                msg = "No records available for print.";
                alert = "alert-warning";
            }
        }
        catch (Exception e)
        {
            msg = $"Error during print: {e.Message}";
            alert = "alert-danger";
        }
    }

}
