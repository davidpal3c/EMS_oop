@page "/"
@using Models
@using Services
@inject Services.DBService DBService
@inject Services.EmployeeService EmployeeService
@inject Services.PayrollService PayrollService
@inject Services.TimeRecordService TimeRecordService

<h1>Home</h1>

Welcome to EMS!

<div class="home-section">
    <NavLink class="navv" href="employees"><div class="home-sub-section"><span>@employeeList.Count</span><div>Employees</div></div></NavLink>
    <NavLink class="navv" href="payroll"><div class="home-sub-section"><span>@payrollList.Count</span><div>Payrolls</div></div></NavLink>
    <NavLink class="navv" href="timerecord"><div class="home-sub-section"><span>@timeList.Count</span><div>Time Records</div></div></NavLink>
</div>

@code{

    private List<Models.Payroll> payrollList = new List<Models.Payroll>();
    private List<Models.Employee> employeeList = new List<Models.Employee>();
    private List<Models.TimeRecord> timeList = new List<Models.TimeRecord>();

    protected override async Task OnInitializedAsync()
    {

        if (DBService.IsSuccessfulConnection())
        {
       
        }
        else
        {
            //msg = "Reconfigure connection string at MauiProgram.cs";
            //alert = "alert-danger";
        }

    
        await RefreshList();
    }


    private async Task RefreshList()
    {
        try
        {
            employeeList = await EmployeeService.GetEmployees("Id");
            payrollList = await PayrollService.GetPayrolls();
            timeList = await TimeRecordService.GetTimeRecords("Id");
         
        }
        catch (Exception e)
        {
            //msg = $"Error during refresh: {e.Message}";
            //alert = "alert-danger";
        }
    }
}
